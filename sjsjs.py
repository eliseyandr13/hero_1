import pygame
import sys
import os
from copy import deepcopy
from pprint import pprint
from io import BytesIO


def terminate():
    pygame.quit()
    sys.exit()


def load_image(name, colorkey=None):
    fullname = os.path.join('files', name)
    # если файл не существует, то выходим
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)

    if colorkey is not None:
        image = image.convert()
        if colorkey == -1:
            colorkey = image.get_at((0, 0))
        image.set_colorkey(colorkey)
    else:
        image = image.convert_alpha()

    return image


class TextInputBox(pygame.sprite.Sprite):
    def __init__(self, x, y, w, font):
        super().__init__(all_sprites_intro)
        self.color = 'white'
        self.clicked = False
        self.backcolor = None
        self.pos = (x, y) 
        self.width = w
        self.font = font
        self.active = False
        self.text = ""
        self.render_text(self.color)

    def render_text(self, color):
        t_surf = font.render(self.text, True, self.color, self.backcolor)
        self.image = pygame.Surface((max(self.width, t_surf.get_width() + 10), t_surf.get_height() + 10), pygame.SRCALPHA)
        if self.backcolor:
            self.image.fill(self.backcolor)
        self.image.blit(t_surf, (5, 5))
        pygame.draw.rect(self.image, color, self.image.get_rect().inflate(-2, -2), 2)
        self.rect = self.image.get_rect(topleft = self.pos)
    
    def get_input_value(self):
        return self.text

    def update(self, event_list):
        for event in event_list:
            if event.type == pygame.MOUSEBUTTONDOWN and not self.active:
                self.active = self.rect.collidepoint(event.pos)
                self.color = 'red'
                self.clicked = True
                if self.active:
                    self.render_text(self.color)
            elif event.type == pygame.MOUSEBUTTONDOWN and self.active:
                self.active = self.rect.collidepoint(event.pos)
                if not self.clicked:
                    self.color = 'white'
                    self.clicked = False
                    self.render_text(self.color)
            if event.type == pygame.KEYDOWN and self.active:
                if event.key == pygame.K_RETURN:
                    self.active = False
                elif event.key == pygame.K_BACKSPACE:
                    self.text = self.text[:-1]
                else:
                    self.text += event.unicode
                self.render_text(self.color)


def start_screen():
    size = 704, 704
    screen = pygame.display.set_mode(size)
    pygame.display.set_caption('Заставка')
    intro_texts = ['Введите имя первого игрока:', 'Введите имя второго игрока:', 'Выберите время:']
    y_coords = [50, 146, 242]
    is_there_red = False
    smth = [[32, 300, '1 + 0', False, False], [197, 300, '2 + 1', False, False], [362, 300, '3 + 0', False, False], 
             [527, 300, '3 + 2', False, False], [197, 387, '5 + 0', False, False], [362, 387, '5 + 3', False, False],
             [527, 387, '10 + 0', False, False], [32, 387, '10 + 5', False, False], [32, 474, '15 + 10', False, False],
             [197, 474, '30 + 0', False, False], [362, 474, '30 + 10', False, False], [527, 474, '30 + 20', False, False]]
    rects = deepcopy(smth)
    # добавляем инпуты
    input_1 = TextInputBox(32, 90, 440, font)
    input_2 = TextInputBox(32, 185, 440, font)
    pygame.sprite.Group(TextInputBox(32, 90, 440, font))
    pygame.sprite.Group(TextInputBox(32, 185, 440, font))

    while True:
        clock.tick(FPS)
        event_list = pygame.event.get()
        for event in event_list:
            if event.type == pygame.QUIT:
                terminate()
            if event.type == pygame.MOUSEMOTION:
                for i in range(12):
                    if not rects[i][-1]:
                        if rects[i][0] <= event.pos[0] <= rects[i][0] + 140 and rects[i][1] <= event.pos[1] <= rects[i][1] + 74:
                            rects = deepcopy(smth)
                            rects[i][3] = True
                            if is_there_red:
                                rects[is_there_red][-1] = True
            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                if 413 <= event.pos[0] <= 413 + 255 and 594 <= event.pos[-1] <= 594 + 74 and \
                    is_there_red and input_1.get_input_value() and input_2.get_input_value():
                    return [input_1.get_input_value(), input_2.get_input_value(), rects[is_there_red][2]]
                for i in range(12):
                    if rects[i][0] <= event.pos[0] <= rects[i][0] + 140 and rects[i][1] <= event.pos[1] <= rects[i][1] + 74:
                        if rects[i][-1]:
                            rects[i][-1] = False
                            is_there_red = False
                        elif not is_there_red:
                            rects[i][-1] = True
                            is_there_red = i
        all_sprites_intro.update(event_list)
        screen.fill('black')
        for i in rects:
            if i[-1]:
                color = 'red'
            elif i[3]:
                color = (242, 236, 236)
            else:
                color = (190, 184, 184)
            pygame.draw.rect(screen, color, (i[0], i[1], 140, 74))
        for i in range(3):  # выводим статичные текста - 1
            screen.blit(font.render(intro_texts[i], True, (190, 184, 184)), (32, y_coords[i]))
        for i in range(12):  # выводим статичные текста - 2
            label = font.render(rects[i][2], 1, (0, 0, 0))
            text_width, text_height = font.size(rects[i][2])
            screen.blit(label, (rects[i][0] + (140 - text_width) // 2, rects[i][1] + 19))
        # кнопка
        pygame.draw.rect(screen, (255, 0, 0), (413, 594, 255, 74))
        screen.blit(font.render('Начать игру', True, 'black'), (449, 613))
        # картинка 1
        picture_1 = load_image('pngwing_1.png')
        picture_1_rect = picture_1.get_rect(topleft=(374, 564))
        screen.blit(picture_1, picture_1_rect)
        # картинка 2
        picture_1 = load_image('pngwing_2.png')
        picture_1_rect = picture_1.get_rect(topleft=(620, 594))
        screen.blit(picture_1, picture_1_rect)

        all_sprites_intro.draw(screen)
        pygame.display.flip()


def draw_board(screen):
    index, stop = 0, False
    for i in range(8):
        for j in range(8):
            pygame.draw.rect(screen, lst_colors[index], (j * 88, i * 88, 88, 88))
            stop = True if j == 7 else False
            if not stop:
                index = (index + 1) % 2


if __name__ == "__main__":
    pygame.init()
    size = width, height = 980, 704
    screen = pygame.display.set_mode(size)
    pygame.display.set_caption('Шахматы')
    clock = pygame.time.Clock()
    FPS = 50
    font = pygame.font.Font('files/Inter-SemiBold.ttf', 30)
    lst_colors = [(195, 162, 110), (117, 78, 45)]
    board = [['Л_ч', 'К_ч', 'С_ч', 'Ко_ч', 'Ф_ч', 'С_ч', 'К_ч', 'Л_ч'],
             ['П_ч', 'П_ч', 'П_ч', 'П_ч', 'П_ч', 'П_ч', 'П_ч', 'П_ч'],
             ['', '', '', '', '', '', '', ''],
             ['', '', '', '', '', '', '', ''],
             ['', '', '', '', '', '', '', ''],
             ['', '', '', '', '', '', '', ''],
             ['П_б', 'П_б', 'П_б', 'П_б', 'П_б', 'П_б', 'П_б', 'П_б'],
             ['Л_б', 'К_б', 'С_б', 'Ко_б', 'Ф_б', 'С_б', 'К_б', 'Л_б']]

    # спрайты
    all_sprites = pygame.sprite.Group()
    all_sprites_intro = pygame.sprite.Group()

    # data = start_screen()
    data = ['Elisey', 'Solomon', '2 + 1']
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()

        screen.fill('black') 
        draw_board(screen)

        screen.blit(font.render(data[0], True, (190, 184, 184)), (736, 32))
        screen.blit(font.render(data[1], True, (190, 184, 184)), (736, 577))

        for y in range(8):
            for x in range(8):
                if board[y][x] == 'Л_б':  # ладья
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="62" viewBox="0 0 48 62" fill="none">
                    <path d="M23.8877 1.25011H19.7772V2.67792V5.39241V6.34061L18.8641 6.59616L17.4355 6.99599C16.5126 7.27586 15.7419 7.46141 14.9228 7.44928C14.0979 7.43707 13.3247 7.22617 12.3902 6.90448L12.387 6.90337L10.9083 6.38982L10.1056 6.11107L10.0695 5.26218L9.95857 2.65774L9.89862 1.25011H6.73423C4.82798 1.25011 3.80893 1.27984 3.20714 1.36234C2.91898 1.40184 2.79991 1.44493 2.75723 1.46422L2.75492 1.46526C2.73777 1.47297 2.72812 1.47731 2.69094 1.51683C2.69054 1.51725 2.6736 1.528 2.64351 1.61382C2.60517 1.72322 2.55619 1.92664 2.51484 2.30821C2.43097 3.08212 2.40197 4.33372 2.40197 6.49288V11.066L4.75378 13.1507L7.52642 15.6084L7.94726 15.9814V16.5438V30.7032V44.8259V45.3119L7.61892 45.6703L5.40395 48.0879L3.51103 50.1853V52.1623C3.51103 53.0836 3.47618 53.8156 3.37141 54.3415C3.32104 54.5944 3.23191 54.9257 3.03448 55.2205C2.79937 55.5715 2.37444 55.9067 1.78043 55.9067C1.77111 55.9067 1.76436 55.9072 1.75985 55.9076C1.74362 55.9218 1.68702 55.9783 1.61604 56.1315C1.43885 56.5138 1.29291 57.2329 1.29291 58.3983C1.29291 58.7096 1.27674 59.0815 1.26444 59.3646C1.25822 59.5075 1.25299 59.6278 1.25133 59.7062C1.24791 59.8668 1.2513 59.9765 1.25975 60.0569C1.26296 60.0875 1.26654 60.11 1.26963 60.1258C1.3576 60.1839 1.64047 60.3159 2.40971 60.4315C3.66657 60.6202 5.74949 60.7029 9.22442 60.7335C11.5965 60.7543 14.5737 60.7511 18.3189 60.747C20.0233 60.7452 21.8868 60.7432 23.9246 60.7432C32.8543 60.7432 38.5162 60.7156 42.0085 60.6426C43.758 60.606 44.941 60.5583 45.7103 60.4992C46.0314 60.4746 46.2617 60.4492 46.4212 60.4254C46.4382 60.3849 46.4577 60.3323 46.4787 60.2648C46.572 59.9649 46.6552 59.4947 46.7076 58.7832L46.7083 58.7746L46.709 58.766C46.8124 57.5864 46.7075 56.8205 46.534 56.3843C46.3858 56.0118 46.2451 55.9813 46.1471 55.967L46.1436 55.9664C45.9433 55.9366 45.5578 55.8747 45.199 55.6373C44.7782 55.359 44.5606 54.9624 44.4472 54.5874C44.3459 54.2523 44.3086 53.872 44.2891 53.4947C44.2687 53.1011 44.2643 52.6109 44.2643 52.0156V49.9339L42.3745 47.8712L42.3745 47.8712L42.3682 47.8643L40.1501 45.4066L39.8281 45.0497V44.5691V30.7765V16.984V16.4493L40.2148 16.08L43.1664 13.2611L43.1722 13.2555L45.7431 10.7683V6.38283C45.7431 6.27742 45.7431 6.17412 45.7431 6.07288C45.7434 4.58285 45.7436 3.53859 45.6716 2.76188C45.5925 1.90995 45.4441 1.67725 45.3778 1.60564C45.3314 1.55548 45.1652 1.40934 44.4092 1.32703C43.6987 1.24967 42.735 1.24984 41.326 1.25008C41.2449 1.2501 41.1622 1.25011 41.0781 1.25011H37.8774L37.8168 2.69368L37.7059 5.33481L37.6692 6.20968L36.8344 6.47404L35.0969 7.02427L35.0969 7.02431L35.0865 7.02751C34.303 7.26813 33.6474 7.44025 32.9496 7.44025C32.2493 7.44025 31.602 7.26706 30.8349 7.02579C30.8341 7.02552 30.8332 7.02525 30.8323 7.02497L29.0628 6.47628L28.221 6.21528L28.1841 5.33481L28.0732 2.69368L28.0125 1.25011H23.8877ZM1.23546 60.0957C1.23378 60.0962 1.23893 60.1036 1.25591 60.1162C1.24562 60.1015 1.23713 60.0952 1.23546 60.0957Z" fill="white" stroke="black" stroke-width="2.5"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 20, y * 88 + 13))
                elif board[y][x] == 'К_б':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="65" height="64" viewBox="0 0 65 64" fill="none">
                    <path d="M27.9021 3.11671L27.8969 3.12312L25.9929 5.45582L25.3783 6.20881L24.4971 5.79869L21.2841 4.30337L21.2807 4.30175C20.4735 3.92308 19.4187 3.55801 18.3809 3.28832C17.3271 3.01447 16.3899 2.86495 15.8021 2.86495H15.7748L15.7475 2.86376L14.3528 2.8028L14.4337 5.64673L14.4338 5.65265C14.4958 8.27264 14.3365 10.2564 13.3846 13.2063C12.4563 16.0828 10.7694 19.8936 7.83141 26.1885L7.83081 26.1898C5.44526 31.2858 2.92369 37.1327 2.23881 39.3129L2.23499 39.3251L2.23092 39.3372C1.90049 40.3186 1.66078 41.0315 1.49644 41.5919C1.33048 42.1579 1.2664 42.4883 1.25276 42.7145C1.23462 43.0154 1.26927 43.1741 1.80185 44.0069L1.81342 44.025L1.82436 44.0435C3.11893 46.2298 5.02531 47.6139 7.98689 48.4409L7.99079 48.442C8.90583 48.7007 9.56004 48.8218 10.0324 48.845C10.464 48.8661 10.661 48.8013 10.7476 48.7566C11.1828 48.4728 11.9301 48.1035 12.7651 48.4707C13.1431 48.637 13.4082 48.9055 13.592 49.1426C13.7764 49.3806 13.9305 49.6544 14.0654 49.9256C14.139 50.0736 14.2914 50.2587 14.5098 50.421C14.7308 50.5852 14.9367 50.6648 15.0567 50.6849L15.0567 50.6849L15.0685 50.687C15.0712 50.6875 15.0735 50.6879 15.0754 50.6884C15.0862 50.6907 15.0875 50.6909 15.1145 50.6792C15.179 50.6513 15.332 50.5626 15.5978 50.2984C16.1444 49.7552 16.8977 48.7513 18.0931 46.979C18.9212 45.7156 19.8967 44.3984 20.8034 43.28C21.691 42.1853 22.5689 41.2111 23.2023 40.6784C24.3653 39.6733 26.0668 38.5804 27.515 37.7947C28.2427 37.3999 28.9468 37.0606 29.5199 36.8439C29.7993 36.7382 30.0993 36.6417 30.3797 36.5946C30.5175 36.5714 30.7074 36.5501 30.9154 36.5707C31.1043 36.5894 31.4825 36.6598 31.8012 36.9801C32.0944 37.2749 32.19 37.6217 32.2232 37.8445C32.2573 38.0736 32.2438 38.2898 32.2216 38.4608C32.177 38.8039 32.0673 39.1786 31.9368 39.5439C31.6709 40.2884 31.2327 41.2266 30.6896 42.2574C29.5975 44.3303 28.0059 46.9191 26.2823 49.3509L26.2774 49.3578L26.2724 49.3647C24.321 52.0397 22.414 54.952 21.9132 55.8961C21.6224 56.4892 21.105 58.1443 20.641 59.9198C20.4144 60.7869 20.2115 61.64 20.0663 62.3426C20.0508 62.4179 20.0361 62.4903 20.0224 62.5597C20.1526 62.5645 20.2926 62.5693 20.4423 62.574C21.5916 62.6101 23.2614 62.6417 25.3304 62.6679C29.466 62.7201 35.1723 62.75 41.4464 62.75H63.1596L63.4133 61.0739C64.0451 56.2383 63.7612 49.8514 62.7839 43.5871C61.8053 37.3146 60.1513 31.2926 58.1174 27.1733C52.968 16.8805 45.6334 10.5578 38.4381 9.67435L38.4313 9.67348C37.7434 9.5852 37.1435 9.50329 36.6481 9.38702C36.1427 9.26841 35.6429 9.0923 35.2002 8.7552C34.7461 8.40939 34.4553 7.97343 34.2333 7.51005C34.0229 7.07066 33.8435 6.53765 33.654 5.95156C33.3098 4.91687 32.5067 3.68079 31.5807 2.69514C31.1234 2.20836 30.6704 1.81983 30.2764 1.56266C30.0803 1.43469 29.9165 1.35085 29.7891 1.30144C29.7704 1.2942 29.7532 1.28799 29.7376 1.28264C29.6269 1.35664 29.4775 1.47184 29.2947 1.633C28.8741 2.00377 28.3721 2.53305 27.9021 3.11671ZM18.8787 62.4942C18.8786 62.4942 18.8804 62.4945 18.8844 62.4951C18.8808 62.4945 18.8788 62.4942 18.8787 62.4942ZM29.8747 1.20264C29.875 1.20217 29.8693 1.20431 29.8573 1.21037C29.8686 1.20609 29.8745 1.2031 29.8747 1.20264Z" fill="white" stroke="black" stroke-width="2.5"/>
                    <path d="M19.5265 18.9095C16.1324 17.7786 14.1906 21.3335 15.1608 24.2429L15.6459 25.6972L16.1309 26.6672C17.1011 27.6366 18.6751 26.8511 20.4964 24.7276C23.407 21.3339 23.8919 20.364 19.5265 18.9095Z" fill="black"/>
                    <path d="M8.36979 39.2731C6.57438 37.9276 3.88885 40.6481 4.4897 42.6671L4.97468 43.6368L5.4597 44.1218L6.42985 44.6067H7.4C8.85522 44.6067 8.64326 44.3588 9.33993 42.6389C10.3105 40.2428 10.3104 40.7275 8.36979 39.2731Z" fill="black"/>
                    <path d="M12.2505 48.9695C12.2505 48.4847 13.7057 46.5453 14.6759 43.1514" stroke="black" stroke-width="2.5"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 11, y * 88 + 12))
                elif board[y][x] == 'С_б':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="61" height="65" viewBox="0 0 61 65" fill="none">
                    <path d="M26.4902 0.9832C24.0068 2.53563 23.3859 6.10622 25.0416 9.26283L25.8176 10.7635L23.4377 11.902C22.1442 12.5229 19.402 14.6963 17.2807 16.7662C14.0729 19.9228 13.4003 20.8543 12.6243 23.4417C11.3308 27.892 12.3138 31.7731 16.1425 37.1548C17.6947 39.3282 17.7464 39.4317 17.0738 41.8121C15.4699 47.4526 15.9355 48.9015 19.7125 49.4708C20.799 49.6777 21.6785 49.9882 21.6785 50.1435C21.6785 50.9714 16.6081 51.7477 11.5377 51.7477C5.22561 51.7477 3.93215 52.2134 1.6039 55.4217L0 57.5951L2.01781 60.5965C3.15606 62.2524 4.60475 63.9601 5.17388 64.3741C6.15691 65.0468 6.41561 65.0468 7.50212 64.3223C8.22646 63.8566 11.7447 63.1321 15.6251 62.6147C23.955 61.4762 26.1281 60.907 28.6115 59.2511L30.5776 57.9056L32.2332 58.9923C35.1824 60.8035 38.2867 61.6315 45.6336 62.6147C50.5488 63.2356 53.084 63.8049 53.7566 64.4258C54.4809 65.0986 54.9466 65.1503 55.7744 64.7363C56.7574 64.1671 61 58.4749 61 57.6469C61 56.8707 58.2061 53.6623 56.6539 52.7309C55.3605 51.9546 54.067 51.7477 49.7727 51.7477C44.5471 51.7477 39.2697 50.9197 39.2697 50.0917C39.2697 49.8847 39.8388 49.6777 40.5632 49.6777C42.374 49.6777 44.8058 48.3323 45.1679 47.1939C45.3232 46.7281 45.0127 44.71 44.4436 42.7436L43.4606 39.2247L45.4784 36.2751C50.497 28.8752 50.1866 22.976 44.3919 17.1285C42.2188 14.9551 37.9245 11.902 36.0619 11.2292C35.2858 10.9705 35.3376 10.7635 36.2689 8.84885C37.6141 6.15797 37.2002 3.51884 35.1306 1.44893C33.8889 0.206985 33.268 0 30.888 0C29.0772 0 27.5768 0.362228 26.4902 0.9832Z" fill="white"/>
                    <path d="M26.357 11.8911L23.9786 13.0288C23.9786 13.0288 23.9786 13.0289 23.9785 13.0289C23.4668 13.2746 22.551 13.8966 21.445 14.7712C20.3653 15.625 19.183 16.6567 18.1555 17.6592C16.5457 19.2433 15.6557 20.1906 15.0644 21.0346C14.5045 21.8338 14.1899 22.5736 13.8231 23.7956C13.2344 25.8239 13.1716 27.6772 13.6736 29.6391C14.1833 31.6314 15.2927 33.8039 17.1605 36.4294C17.5389 36.9593 17.865 37.4164 18.1078 37.8191C18.3576 38.2334 18.5652 38.662 18.6666 39.1531C18.8599 40.0892 18.598 41.0157 18.2954 42.0859C18.2892 42.1079 18.2829 42.1299 18.2767 42.152L18.2761 42.154C17.8802 43.5463 17.6286 44.6246 17.5177 45.4707C17.4054 46.3281 17.4543 46.8342 17.5585 47.1399C17.6953 47.5413 18.0488 47.9559 19.8988 48.2347L19.9227 48.2383L19.9464 48.2428C20.5346 48.3549 21.0864 48.4983 21.5112 48.6451C21.7167 48.7161 21.9347 48.8022 22.1222 48.9043C22.2105 48.9525 22.3469 49.0333 22.4787 49.1528C22.5536 49.2208 22.9285 49.5616 22.9285 50.1435C22.9285 50.9112 22.3659 51.3402 22.151 51.4856C21.8681 51.6769 21.5297 51.8176 21.2107 51.9265C20.5559 52.1499 19.6817 52.3378 18.7028 52.491C16.7285 52.8 14.1279 52.9977 11.5377 52.9977C8.34592 52.9977 6.66979 53.1265 5.50931 53.5544C4.45975 53.9414 3.73589 54.6121 2.61559 56.1559L2.61562 56.1559L2.60968 56.164L1.52877 57.6287L3.05152 59.8937C3.59569 60.6849 4.21639 61.4919 4.76664 62.1473C5.33852 62.8286 5.74623 63.2392 5.89851 63.3553C6.09051 63.4861 6.2088 63.5582 6.2874 63.5989C6.39282 63.5482 6.54866 63.4557 6.80866 63.2823L6.81733 63.2766L6.82609 63.2709C7.18076 63.0429 7.70383 62.869 8.18596 62.7304C8.7187 62.5773 9.38024 62.4198 10.1245 62.2643C11.6151 61.9529 13.4949 61.6377 15.4578 61.3759C23.8167 60.2335 25.7062 59.6846 27.912 58.2151L29.8717 56.8741L30.5631 56.4009L31.2635 56.8606L32.9032 57.9368C35.6055 59.5927 38.4817 60.3962 45.7949 61.3751C48.2626 61.687 50.1695 61.9901 51.5585 62.3003C52.2526 62.4553 52.8451 62.6181 53.3261 62.795C53.7791 62.9615 54.2519 63.1819 54.6045 63.5074L54.6072 63.5099C54.7707 63.6617 54.8648 63.7226 54.9056 63.7451C54.9422 63.7362 55.0181 63.7124 55.1493 63.6504C55.1498 63.65 55.1503 63.6496 55.1508 63.6492C55.178 63.6263 55.2562 63.5605 55.3938 63.4218C55.5743 63.2399 55.7987 62.9928 56.0557 62.6924C56.5681 62.0933 57.1722 61.3265 57.7514 60.5446C58.3313 59.7617 58.8723 58.9827 59.2626 58.3599C59.4436 58.0713 59.5817 57.8328 59.6745 57.6526C59.6307 57.5773 59.574 57.4867 59.5027 57.381C59.2553 57.0141 58.8937 56.5543 58.4701 56.0723C57.5968 55.0786 56.6144 54.165 56.0107 53.8027C55.0552 53.2293 54.1064 52.9977 49.7727 52.9977C47.1026 52.9977 44.4114 52.7867 42.3672 52.465C41.353 52.3053 40.4507 52.1112 39.7771 51.8844C39.4489 51.7739 39.1049 51.633 38.8186 51.4442C38.613 51.3086 38.0197 50.8788 38.0197 50.0917C38.0197 49.4443 38.4483 49.0685 38.6199 48.9398C38.8322 48.7805 39.064 48.6831 39.2495 48.6213C39.6342 48.493 40.0951 48.4277 40.5632 48.4277C41.2002 48.4277 42.0544 48.1767 42.8113 47.7648C43.1797 47.5643 43.4834 47.3478 43.6982 47.1477C43.8536 47.0029 43.9266 46.9004 43.9573 46.85C43.958 46.8127 43.9579 46.748 43.9523 46.6492C43.9393 46.4203 43.9037 46.1079 43.8431 45.7289C43.7223 44.9738 43.514 44.0278 43.2429 43.0911L43.2428 43.0911L43.2397 43.0799L42.2567 39.561L42.0999 38.9999L42.4289 38.5189L44.4439 35.5735C44.4444 35.5726 44.445 35.5718 44.4456 35.5709C46.8698 31.9958 47.8957 28.9432 47.7421 26.1892C47.5897 23.4566 46.2625 20.7926 43.506 18.0104C42.4865 16.991 40.9312 15.7305 39.3874 14.6357C37.8214 13.5252 36.4103 12.6879 35.6505 12.4097C35.4594 12.3458 35.0782 12.2133 34.7725 11.9213C34.3435 11.5116 34.2361 10.988 34.2813 10.5357C34.3177 10.172 34.4548 9.8091 34.5831 9.50558C34.7218 9.17743 34.9143 8.77602 35.1448 8.30209L35.1447 8.30206L35.1508 8.28991C35.7256 7.14005 35.8936 6.06853 35.745 5.10702C35.5966 4.14735 35.1186 3.20486 34.2467 2.33274C33.6695 1.75546 33.368 1.55599 33.0333 1.44203C32.6435 1.30931 32.0847 1.25 30.888 1.25C29.2439 1.25 27.9805 1.578 27.1323 2.05609C25.3859 3.16582 24.7008 5.92204 26.1486 8.68221L26.1519 8.68863L26.928 10.1893L27.5203 11.3347L26.357 11.8911ZM40.0208 51.0002C40.0207 51.0003 40.0227 50.9995 40.0266 50.9978C40.0228 50.9992 40.0209 51.0001 40.0208 51.0002ZM40.1948 49.357C40.1966 49.3582 40.1989 49.3597 40.2018 49.3614C40.1763 49.3411 40.1689 49.34 40.1948 49.357ZM54.9302 63.757C54.9301 63.7569 54.9295 63.7567 54.9283 63.7563L54.9302 63.757ZM54.8812 63.75C54.8793 63.7501 54.8783 63.7502 54.8783 63.7503L54.8812 63.75ZM59.7799 57.4211C59.7797 57.4212 59.778 57.4258 59.7755 57.4346C59.7789 57.4253 59.7801 57.421 59.7799 57.4211ZM59.7758 57.8489C59.7785 57.8579 59.7804 57.8627 59.7807 57.8629C59.781 57.863 59.7796 57.8585 59.7758 57.8489Z" stroke="black" stroke-width="2.5"/>
                    <path d="M32.1391 7.63105C32.8634 6.23386 32.8117 5.71639 31.8287 4.78493C30.2765 3.2325 28 4.11221 28 6.28561C28 8.56251 31.1043 9.54571 32.1391 7.63105Z" fill="black"/>
                    <path d="M38.2312 45.5403C39.2242 45.2304 39.2715 44.4728 38.2784 44.1973C37.049 43.8529 23.714 43.9906 22.8628 44.3695C20.1674 45.4715 23.9977 46.1946 31.4218 45.9536C34.6846 45.8503 37.7583 45.6781 38.2312 45.5403Z" fill="black"/>
                    <path d="M39.9919 42.2317C40.4058 41.973 40.561 41.4038 40.4058 40.938C39.9401 39.6961 22.6076 39.6961 22.0902 40.8863C21.935 41.352 21.9868 41.8695 22.1937 42.0765C22.7111 42.6457 39.164 42.801 39.9919 42.2317Z" fill="black"/>
                    <path d="M34.7732 24.8316C32.6083 24.8316 32.6083 24.7705 32.7939 22.509C32.9795 20.3697 32.9176 20.2474 31.0001 20.0641C29.0208 19.8807 28.9589 19.9418 28.9589 22.3256C28.9589 24.6483 28.8352 24.8316 27.227 24.8316C24.9384 24.8316 24.8146 25.0761 25.1239 27.2765C25.3713 28.8046 25.6806 29.1102 27.1651 29.1102C28.8352 29.1102 28.9589 29.2936 28.9589 31.5551C28.9589 33.8778 29.0208 34 31.0001 34C32.8557 34 32.9795 33.8778 32.9795 31.7385C32.9795 29.5992 33.1032 29.4158 35.0207 29.2324C36.8144 29.0491 37 28.8657 37 26.9098C37 24.9539 36.8763 24.8316 34.7732 24.8316Z" fill="black"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 13, y * 88 + 12))
                elif board[y][x] == 'Ко_б':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="60" height="65" viewBox="0 0 60 65" fill="none">
                    <path d="M27.7895 1.78395C27.2434 3.52308 26.9704 3.74047 25.2775 3.74047C23.53 3.74047 23.4207 3.84917 23.4207 5.58829C23.4207 7.21871 23.6938 7.65349 25.6051 8.6861C26.8065 9.39261 27.7895 10.3165 27.7895 10.7513C27.7895 11.1861 26.6427 12.7622 25.2229 14.1752C22.9292 16.4578 22.6562 17.0556 22.4378 19.773C22.3285 21.4034 22.1101 22.7621 21.9463 22.7621C21.8371 22.7621 21.0179 22.273 20.1988 21.6208C16.6491 19.0121 10.2051 18.6317 5.94558 20.8599C3.76118 22.0012 1.19452 25.1534 0.539198 27.4903C-0.716829 31.9468 0.047709 34.5555 4.68955 41.6207C8.12997 46.7837 9.05834 49.2837 9.54983 54.9902C10.0959 60.9684 11.2427 62.3271 17.086 63.8488C23.803 65.6423 39.476 65.2619 45.3193 63.251C49.2512 61.838 50.0157 60.751 50.4526 55.9685C51.0533 49.8815 52.3094 46.4033 56.0774 40.7511C59.6817 35.3707 60.2824 33.4686 59.9001 29.2295C59.081 21.023 49.5789 16.8382 41.442 21.023L38.2746 22.6534L37.8924 19.6643C37.5647 17.0556 37.237 16.4034 35.1073 14.3926C32.1583 11.5665 32.0491 10.2078 34.6158 8.63175C36.1995 7.65349 36.5271 7.11002 36.5271 5.58829C36.5271 3.84917 36.4179 3.74047 34.6704 3.74047C33.0867 3.74047 32.8136 3.52308 32.3768 1.947C31.9399 0.533966 31.5576 0.153525 30.1378 0.0448303C28.6087 -0.118212 28.3902 0.0991808 27.7895 1.78395Z" fill="white"/>
                    <path d="M20.8714 22.1909C20.8715 22.1908 20.8722 22.1889 20.8734 22.1852C20.8719 22.1891 20.8713 22.191 20.8714 22.1909ZM20.6685 23.4911C20.3178 23.2684 19.8799 22.9634 19.4403 22.6147C17.9137 21.5003 15.6786 20.8075 13.2696 20.6746C10.8576 20.5416 8.41545 20.9786 6.52498 21.9675L6.52443 21.9678C5.63559 22.4322 4.57321 23.3689 3.63793 24.5165C2.7018 25.6651 2.00726 26.8847 1.74277 27.8278L1.74233 27.8294C1.15876 29.9 1.07142 31.4179 1.60204 33.2251C2.15847 35.1202 3.41248 37.4002 5.73199 40.9309C7.46871 43.5374 8.6254 45.5502 9.39985 47.6733C10.1772 49.8043 10.545 51.9788 10.7949 54.8797C11.0687 57.8742 11.4801 59.3353 12.284 60.2812C13.0889 61.2284 14.4719 61.8764 17.401 62.6392L17.401 62.6392L17.4084 62.6412C20.5905 63.4908 26.0434 63.8485 31.5025 63.7269C36.9683 63.6051 42.1764 63.0084 44.9047 62.0718C46.8454 61.3737 47.6805 60.8547 48.1748 60.1533C48.6975 59.4115 48.9879 58.2624 49.2078 55.8547L49.2078 55.8547L49.2087 55.8457C49.5153 52.7382 49.9954 50.2343 50.9042 47.765C51.8112 45.3007 53.1247 42.9269 55.0374 40.0578L55.0389 40.0555C56.8378 37.37 57.8018 35.6725 58.2965 34.1711C58.7739 32.7224 58.8386 31.38 58.6557 29.3478C57.9433 22.2541 49.5834 18.2415 42.0137 22.1346L38.8467 23.7648L37.261 24.5811L37.0347 22.812L36.6524 19.8229L36.6521 19.8201C36.4896 18.5261 36.3443 17.9096 36.0691 17.3857C35.7866 16.8482 35.3143 16.3071 34.2491 15.3015L34.2491 15.3015L34.2424 15.2951C33.4803 14.5647 32.8542 13.8851 32.4016 13.239C31.9534 12.5991 31.6112 11.9022 31.5476 11.1485C31.4064 9.47576 32.6413 8.37759 33.96 7.56754C34.735 7.08878 34.9903 6.83556 35.1049 6.65192C35.1954 6.50699 35.2771 6.28107 35.2771 5.58829C35.2771 5.33231 35.2742 5.14326 35.2675 5.00026C35.1226 4.99343 34.9307 4.99047 34.6704 4.99047C33.9393 4.99047 33.0315 4.97411 32.3226 4.41874C31.634 3.87923 31.3765 3.01699 31.1773 2.29928C30.9647 1.61586 30.8424 1.48201 30.805 1.44947L30.8044 1.44896C30.792 1.43791 30.6821 1.34016 30.0423 1.29118L30.0238 1.28976L30.0052 1.28778C29.6646 1.25146 29.4736 1.24516 29.3592 1.25273C29.346 1.27499 29.3296 1.30445 29.3103 1.34268C29.2224 1.51648 29.121 1.77256 28.9748 2.18177C28.8386 2.61411 28.6982 3.02168 28.5288 3.37003C28.3511 3.73549 28.1087 4.10624 27.7327 4.39975C26.9962 4.97459 26.0604 4.99047 25.2775 4.99047C25.0171 4.99047 24.8253 4.99343 24.6803 5.00025C24.6737 5.14326 24.6707 5.33231 24.6707 5.58829C24.6707 6.3795 24.7527 6.54752 24.8223 6.64755C24.9371 6.81255 25.2202 7.0574 26.1993 7.58633L26.2192 7.59711L26.2388 7.6086C26.9082 8.00229 27.5322 8.46453 28.0058 8.9115C28.2406 9.1331 28.4656 9.37636 28.6419 9.62871C28.7841 9.83226 29.0395 10.2402 29.0395 10.7513C29.0395 11.0392 28.9547 11.2844 28.902 11.4197C28.8396 11.5795 28.76 11.7372 28.6781 11.883C28.5134 12.1762 28.2926 12.5045 28.0421 12.8417C27.5385 13.5198 26.8556 14.3138 26.1046 15.0612C24.9464 16.2138 24.4513 16.8005 24.173 17.3643C23.9075 17.9022 23.7934 18.5127 23.6844 19.8651C23.628 20.7038 23.5427 21.489 23.4462 22.0804C23.3988 22.3701 23.3428 22.6512 23.2755 22.879C23.2444 22.9838 23.1929 23.1413 23.1089 23.2962C23.0685 23.3707 22.9873 23.5079 22.8497 23.6419C22.7174 23.7708 22.4106 24.0121 21.9463 24.0121C21.749 24.0121 21.5955 23.9651 21.5511 23.9515C21.4827 23.9305 21.4246 23.9073 21.3843 23.8901C21.3025 23.8554 21.2224 23.8149 21.1535 23.7781C21.012 23.7025 20.8453 23.6035 20.6685 23.4911ZM35.2343 4.68693C35.2343 4.68705 35.2347 4.68861 35.2356 4.69144C35.2348 4.68825 35.2343 4.68681 35.2343 4.68693ZM35.5762 5.03241C35.5792 5.03334 35.5808 5.03375 35.5809 5.03373C35.581 5.03371 35.5795 5.03324 35.5762 5.03241ZM24.367 5.03374C24.367 5.03377 24.3688 5.03335 24.3719 5.03234C24.3685 5.0332 24.3669 5.0337 24.367 5.03374ZM24.7122 4.69144C24.7132 4.68859 24.7135 4.68704 24.7135 4.68693C24.7135 4.68682 24.7131 4.68826 24.7122 4.69144Z" stroke="black" stroke-width="2.5"/>
                    <path d="M9.93232 25.534C7.74793 26.1861 5.9458 28.4144 5.9458 30.5339C5.9458 33.0339 8.02098 36.8383 11.1337 39.9361C13.5912 42.3817 14.1919 42.7078 16.8678 43.0339C20.199 43.4143 23.8578 42.7621 24.6224 41.6752C25.7692 39.9904 23.9671 33.4144 21.5096 30.1535C18.5061 26.3492 13.8096 24.447 9.93232 25.534Z" fill="black"/>
                    <path d="M45.4286 25.4796C40.4591 26.6209 36.418 31.6209 35.3804 37.8708C34.6705 42.273 35.5442 42.9795 41.169 42.9795C45.2102 42.9795 45.374 42.9251 47.886 40.8599C51.2719 38.0339 54.0023 33.523 54.0023 30.7513C54.0023 29.1752 53.6201 28.2513 52.4187 27.0557C51.5449 26.1861 50.3435 25.4796 49.7428 25.4796C49.1421 25.4796 48.3229 25.3709 47.886 25.2622C47.5038 25.1535 46.357 25.2622 45.4286 25.4796Z" fill="black"/>
                    <path d="M44.5545 55.7513C44.4453 55.3708 43.5169 54.8274 42.4793 54.5013C39.9127 53.6861 30.2467 53.3056 23.6935 53.7947C18.1779 54.1752 15.229 54.8817 15.229 55.86C15.229 57.1643 17.3588 57.436 23.5843 56.8926C27.9531 56.5121 31.9942 56.5121 36.363 56.8926C42.807 57.436 45.046 57.1643 44.5545 55.7513Z" fill="black"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 14, y * 88 + 12))
                elif board[y][x] == 'Ф_б':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="68" height="60" viewBox="0 0 68 60" fill="none">
                    <path d="M26.195 27.2054C25.4049 25.6655 24.3495 23.4199 23.0602 20.5343L23.0602 20.5342C21.9638 18.0863 20.9625 15.8068 20.2345 14.1039C19.8708 13.2533 19.5732 12.5416 19.3654 12.0229C19.262 11.7647 19.1776 11.5461 19.1177 11.3787C19.0882 11.2961 19.0606 11.2149 19.0392 11.1424C19.0388 11.1412 19.0383 11.1395 19.0377 11.1374C19.0267 11.1015 18.9774 10.9392 18.9774 10.764C18.9774 10.3486 19.1824 9.98152 19.3069 9.78602C19.4611 9.54396 19.6679 9.29795 19.9002 9.09735L19.9109 9.0881L19.9219 9.07916C19.9884 9.02495 20.1717 8.72916 20.1276 8.09511C20.0868 7.51015 19.8617 6.93401 19.5447 6.58514L19.539 6.57891L19.5335 6.57258C19.3731 6.39004 19.1115 6.1804 18.8022 6.00274C18.4894 5.82304 18.201 5.71799 18.0095 5.68651L18.0008 5.68507L17.992 5.68348C17.5305 5.59915 17.3943 5.62819 17.3011 5.66346C17.1596 5.717 16.9447 5.85674 16.4511 6.32403C15.764 7.02205 15.5606 7.82307 15.679 8.47775C15.7958 9.12401 16.2433 9.73586 17.0989 10.0541L17.1129 10.0593L17.1266 10.0649C17.5604 10.2411 17.9818 10.5019 18.284 10.9398C18.5824 11.3721 18.6851 11.8625 18.7095 12.3431L18.7107 12.3684V12.3937C18.7107 12.6416 18.8005 13.8417 18.9568 15.6625C19.1101 17.449 19.321 19.7665 19.5513 22.1893C19.8776 25.4654 20.0721 27.725 20.1407 29.204C20.1748 29.9389 20.1797 30.5165 20.1473 30.9428C20.1313 31.1533 20.1036 31.3668 20.0501 31.5599C20.0078 31.7129 19.8995 32.0498 19.5873 32.2893L19.5804 32.2946L19.5733 32.2998C19.2697 32.5245 18.9449 32.5275 18.754 32.4993C18.5687 32.4719 18.418 32.4049 18.3227 32.356C18.1282 32.2561 17.9371 32.1116 17.7663 31.9689C17.4118 31.6726 16.9523 31.2186 16.3916 30.6223C15.2615 29.4206 13.623 27.5355 11.4123 24.8994L11.4106 24.8974C8.39527 21.2824 6.76957 19.3306 5.95881 18.1604C5.55859 17.5828 5.27476 17.0841 5.16351 16.5963C5.03341 16.0257 5.16455 15.5914 5.28753 15.2639L5.2913 15.2538L5.29529 15.2438C5.70544 14.2188 5.36913 13.2187 4.60001 12.6996C2.85792 11.5897 1.00778 12.7017 1.00002 14.3542C1.01781 15.094 1.17043 15.5174 1.39586 15.8086C1.62932 16.1102 2.04346 16.4031 2.84738 16.6739L2.86359 16.6791C3.19527 16.7851 3.60513 16.9162 3.98846 17.1921C4.39706 17.4863 4.70316 17.8859 4.99692 18.4086C5.55253 19.3973 6.2444 21.174 7.52119 24.4527L7.53975 24.5004L7.53986 24.5006C8.32968 26.5307 9.3605 29.1546 10.3547 31.6853C11.2034 33.8457 12.0255 35.9381 12.6482 37.5354C15.5114 44.7503 16.3157 48.6962 15.667 53.3454C15.5671 54.134 15.511 54.6037 15.5248 54.95C15.5365 55.2404 15.5935 55.3162 15.6484 55.3753C15.7546 55.4897 15.9992 55.6599 16.6184 55.9111C17.2217 56.1558 18.0476 56.428 19.2141 56.8116L19.2141 56.8116L19.2202 56.8136C24.4122 58.5581 27.2237 58.9977 33.0396 58.9977L33.0459 58.9978C38.9111 59.0348 41.3843 58.642 49.6641 56.2329L49.6663 56.2322L52.9967 55.2713L52.8625 49.9412L52.8625 49.941L52.7088 43.801L52.7036 43.5945L52.7807 43.4029L57.3524 32.0325L57.3535 32.0299C57.7926 30.947 58.2253 29.8802 58.6424 28.852C60.6411 23.925 62.2802 19.8845 62.5284 19.2112L62.5339 19.1962L62.5399 19.1813C62.79 18.5645 63.0743 18.0255 63.524 17.5888C63.9788 17.1473 64.5218 16.8885 65.1423 16.6774L65.146 16.6761C65.9543 16.4047 66.37 16.1111 66.6041 15.8086C66.8296 15.5174 66.9822 15.094 67 14.3542C66.9923 12.7017 65.1421 11.5897 63.4 12.6997C62.6309 13.2188 62.2946 14.2188 62.7047 15.2438L62.7048 15.2438L62.708 15.2521C62.8333 15.5735 62.9652 16.0004 62.8453 16.5598C62.7422 17.041 62.4708 17.5275 62.0923 18.0801C61.3274 19.1972 59.796 21.037 56.9734 24.4048C56.721 24.708 56.478 24.9999 56.2438 25.2812C53.2152 28.9193 51.6816 30.7615 50.8495 31.6459C50.6222 31.8875 50.4238 32.0831 50.2462 32.2314C50.0809 32.3695 49.8611 32.5296 49.591 32.6131C49.2523 32.7177 48.9415 32.672 48.6895 32.5601C48.5904 32.5161 48.5106 32.4662 48.4723 32.4421C48.4467 32.426 48.433 32.4172 48.4238 32.4112C48.4128 32.4041 48.408 32.401 48.3968 32.3944L48.3765 32.3824L48.3567 32.3694C47.9954 32.1317 47.8776 31.7612 47.8358 31.6128C47.7807 31.4167 47.7535 31.1992 47.7383 30.9862C47.7074 30.5532 47.7149 29.9553 47.7538 29.1768C47.832 27.6094 48.0457 25.1615 48.4103 21.5073C48.6603 18.8517 48.9104 16.3745 49.1127 14.5258C49.2138 13.6019 49.3035 12.8308 49.3755 12.2714C49.4114 11.9926 49.4438 11.7596 49.4717 11.5839C49.4856 11.4969 49.4997 11.4153 49.514 11.3454L49.5151 11.3403C49.5222 11.3049 49.542 11.2075 49.5798 11.1048C49.7225 10.7043 50.0277 10.4381 50.2627 10.289C50.5031 10.1366 50.8217 10.009 51.1756 9.99304C51.1982 9.98125 51.2425 9.95532 51.3093 9.90289C51.4608 9.78416 51.6438 9.59383 51.8233 9.35058C52.2136 8.82166 52.4011 8.30478 52.4011 8.07297C52.4011 7.56979 52.2868 7.18951 52.0884 6.88575C51.8877 6.57845 51.5556 6.28006 51.0097 6.01848L50.9976 6.0127L50.9857 6.00661C49.9846 5.49354 49.0127 5.8146 48.4028 6.56005C47.7869 7.31279 47.6053 8.43491 48.2801 9.45379L48.2805 9.45448C48.4733 9.74613 48.6827 10.1252 48.6952 10.6934C48.7059 11.1799 48.5691 11.7283 48.3391 12.3969C47.8741 13.7483 46.8504 16.0661 44.9407 20.3426C43.766 23.0024 42.7031 25.2907 41.8873 26.9292C41.4804 27.7463 41.1281 28.4158 40.8499 28.8929C40.7126 29.1285 40.5808 29.3388 40.4607 29.5023C40.402 29.5821 40.3285 29.675 40.2436 29.7595L40.2403 29.7629C40.19 29.8131 39.9878 30.0152 39.6695 30.085L39.6534 30.0885L39.6416 30.0907C39.6416 30.0907 39.6415 30.0907 39.6413 30.0908C39.6395 30.0913 39.6297 30.0938 39.5989 30.1018L39.5945 30.1029C39.559 30.1121 39.4557 30.139 39.3355 30.1488C39.193 30.1604 38.9969 30.1518 38.7853 30.0638C38.5751 29.9765 38.4222 29.841 38.3152 29.711C38.1302 29.4861 38.0293 29.2095 37.9616 28.9937C37.885 28.7496 37.8079 28.433 37.723 28.031C37.4098 26.5487 36.911 23.5145 35.9069 17.4059C35.829 16.9323 35.7482 16.4404 35.6641 15.9292L35.664 15.9286L35.6409 15.7873C34.9508 11.5738 34.5905 9.37376 34.5056 8.16682C34.4636 7.57049 34.4714 7.04838 34.6437 6.6051C34.8302 6.12518 35.1656 5.86263 35.3486 5.71941C35.359 5.71127 35.3689 5.70353 35.3782 5.69614L35.3782 5.69611L35.3858 5.69023C36.1895 5.06836 36.5509 4.36566 36.6111 3.73738C36.6701 3.12078 36.4529 2.4428 35.8369 1.8148C35.4649 1.46612 35.1888 1.2771 34.9373 1.16648C34.6935 1.05928 34.4142 0.999996 34 0.999996C33.5858 0.999996 33.3065 1.05928 33.0627 1.16648C32.8112 1.27709 32.5351 1.46609 32.1632 1.81474C31.54 2.44963 31.3156 3.04441 31.3214 3.55133C31.3272 4.06086 31.5676 4.66338 32.2349 5.30602L32.235 5.30597L32.2435 5.31442L33.4345 6.48936L33.8031 6.85297L33.7189 7.36381L31.952 18.0876L31.9517 18.0899L31.9227 18.2683C31.4538 21.1549 31.0235 23.8036 30.7085 25.7612C30.5476 26.7606 30.4171 27.5784 30.3268 28.1554C30.2816 28.4442 30.2468 28.6704 30.2235 28.828C30.2118 28.9073 30.2035 28.9657 30.1983 29.0047C30.1975 29.0108 30.1968 29.0161 30.1962 29.0207C30.1596 29.7752 29.4809 30.0316 29.2693 30.0861C28.969 30.1634 28.654 30.1462 28.3794 30.0873C28.1246 30.0349 27.9463 29.9041 27.8641 29.8381C27.7622 29.7564 27.6769 29.6656 27.6099 29.5875C27.475 29.4301 27.3377 29.2325 27.2019 29.0184C26.9266 28.5843 26.5886 27.9723 26.195 27.2054ZM38.8216 28.3535C38.8216 28.3535 38.8216 28.3535 38.8217 28.3534L38.8216 28.3535ZM30.1934 29.0446C30.1934 29.0446 30.1936 29.0428 30.1939 29.0395C30.1935 29.043 30.1934 29.0446 30.1934 29.0446ZM18.1244 31.0194C18.1184 31.0364 18.1187 31.0405 18.1227 31.0261C18.1231 31.0245 18.1237 31.0223 18.1244 31.0194Z" fill="white" stroke="black" stroke-width="2"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 10, y * 88 + 14))
                elif board[y][x] == 'П_б':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="44" height="61" viewBox="0 0 44 61" fill="none">
                    <path d="M18.0072 2.2489L17.9988 2.25346L17.9903 2.2579C16.3336 3.12701 15.2961 4.33602 14.8039 5.7429C14.3082 7.15986 14.3236 8.90073 15.0048 10.8877C15.2634 11.5914 15.4806 12.2551 15.6284 12.7594C15.7019 13.0104 15.7629 13.238 15.8029 13.4183C15.8219 13.5036 15.843 13.6085 15.8552 13.7119C15.8607 13.7588 15.87 13.8496 15.8656 13.9573C15.8635 14.0101 15.8568 14.1074 15.8278 14.2241C15.8047 14.3171 15.7325 14.5724 15.5029 14.8064L15.36 14.952L15.1783 15.0446C15.1818 15.0428 15.1241 15.0738 14.992 15.1495C14.8712 15.2186 14.7065 15.3145 14.5101 15.4319C14.1166 15.667 13.6018 15.9846 13.0618 16.3423L13.0418 16.3556L13.0213 16.3681C11.4852 17.3027 10.2816 19.0783 9.68478 21.2136C9.09018 23.3411 9.14322 25.6736 9.94328 27.6009L9.95022 27.6176L9.95667 27.6346C10.0928 27.9914 10.407 28.5262 10.8468 29.115C11.2734 29.686 11.7615 30.2323 12.1924 30.6243C12.5588 30.9406 12.8727 31.2243 13.1229 31.4793C13.3631 31.7241 13.6121 32.009 13.7792 32.3274C13.9604 32.6726 14.1067 33.1841 13.8948 33.744C13.7092 34.2342 13.3332 34.5168 13.1077 34.6631L13.0779 34.6824L13.0471 34.7C11.754 35.438 10.1206 36.687 8.61672 38.0386C7.10632 39.396 5.82619 40.7676 5.18325 41.7237C3.92264 43.6379 3.10655 45.3011 2.56199 47.2634C2.01143 49.2474 1.72312 51.5914 1.58478 54.8906L1.58445 54.8984L1.58402 54.9063L1.31999 59.75H22H42.68L42.416 54.9063L42.4159 54.9053C42.1937 50.7716 41.7528 47.9622 40.9832 45.9228L40.9831 45.9228L40.9789 45.9112C40.3419 44.1713 39.1279 42.1978 37.6233 40.3905C36.1196 38.5842 34.3898 37.0213 32.7789 36.0568C32.0857 35.6446 31.4396 35.2263 30.9564 34.88C30.7182 34.7093 30.4969 34.54 30.3244 34.3874C30.2416 34.3141 30.1396 34.2182 30.0482 34.1088C30.0032 34.0549 29.9365 33.9692 29.8753 33.8584C29.8266 33.7701 29.7067 33.5359 29.7067 33.215C29.7067 32.852 29.8596 32.5841 29.9011 32.5113L29.9014 32.5107C29.9673 32.3953 30.0415 32.2965 30.0996 32.2242C30.2183 32.0765 30.3653 31.9223 30.5101 31.7786C30.8055 31.4855 31.1941 31.136 31.5898 30.7902L31.6134 30.7696L31.6379 30.7503C32.2879 30.2374 33.0686 29.1513 33.7056 27.8191C34.3352 26.5024 34.719 25.1656 34.7449 24.2427C34.7407 21.5593 33.591 18.886 31.7969 17.1968C31.2287 16.7009 30.6519 16.2229 30.1749 15.8515C29.9333 15.6635 29.7255 15.5091 29.5621 15.3957C29.457 15.3228 29.3911 15.2817 29.3579 15.2616C29.1023 15.1733 28.7967 15.0178 28.544 14.7259C28.2276 14.3605 28.1275 13.9377 28.1125 13.5848C28.0871 12.9904 28.2999 12.2708 28.5371 11.5455L28.5465 11.5167L28.5573 11.4884C28.8773 10.6497 29.1469 8.87344 29.1469 7.598C29.1469 5.18726 27.6884 3.18102 25.5068 2.09083C23.3236 0.999882 20.5095 0.88707 18.0072 2.2489Z" fill="white" stroke="black" stroke-width="2.5"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 22, y * 88 + 14))

                elif board[y][x] == 'Л_ч':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="62" viewBox="0 0 48 62" fill="none">
                    <path d="M1.78043 0.660397C1.26287 1.21063 1.15197 2.20105 1.15197 6.49288V11.6284L3.92461 14.0861L6.69726 16.5438V30.7032V44.8259L4.47914 47.2469L2.26103 49.7046V52.1623C2.26103 53.9964 2.11315 54.6567 1.78043 54.6567C0.634407 54.6567 0.0429091 55.9406 0.0429091 58.3983C0.0429091 62.3233 -2.10127 61.9932 23.9246 61.9932C41.7805 61.9932 46.6234 61.8831 47.1409 61.5163C47.5846 61.1861 47.8433 60.3791 47.9542 58.8752C48.1761 56.3441 47.5846 54.9135 46.3276 54.7301C45.5883 54.62 45.5143 54.3999 45.5143 52.0156V49.4478L43.2962 47.0268L41.0781 44.5691V30.7765V16.984L44.0356 14.1595L46.9931 11.2983V6.38283C46.9931 -0.10993 47.104 0.000116329 41.0781 0.000116329H36.6788L36.5679 2.64124L36.457 5.28236L34.7195 5.8326C33.1668 6.30947 32.7232 6.30947 31.2075 5.8326L29.433 5.28236L29.3221 2.64124L29.2112 0.000116329H23.8877H18.5272V2.67792V5.39241L17.0854 5.79592C15.274 6.34615 14.6085 6.34615 12.7971 5.72255L11.3183 5.209L11.2074 2.60456L11.0965 0.000116329H6.73423C2.96343 0.000116329 2.298 0.110163 1.78043 0.660397Z" fill="black"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 20, y * 88 + 13))
                elif board[y][x] == 'К_ч':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="65" height="64" viewBox="0 0 65 64" fill="none">
                    <path d="M26.9285 2.33271L25.0245 4.66542L21.8116 3.17009C20.0266 2.33271 17.2896 1.61495 15.8021 1.61495L13.0651 1.49532L13.1841 5.68224C13.3031 10.7065 12.5892 13.0392 6.69871 25.6598C4.31873 30.7439 1.76026 36.6654 1.04627 38.9383C-0.262721 42.8262 -0.32222 43.0056 0.748769 44.6804C2.23625 47.1925 4.43773 48.7477 7.6507 49.6449C9.55468 50.1832 10.6852 50.243 11.3992 49.8243C12.1132 49.3458 12.4702 49.5252 12.9461 50.4822C13.3031 51.2 14.1361 51.7981 14.8501 51.9178C15.8616 52.0972 16.7541 51.2 19.1341 47.671C20.7406 45.2187 22.942 42.5271 24.013 41.6299C26.155 39.7757 30.4985 37.443 30.915 37.8617C31.51 38.4598 28.654 43.843 25.2625 48.628C23.299 51.3196 21.3356 54.3103 20.8001 55.3271C20.0861 56.7626 18.5986 62.5047 18.5986 63.7009C18.5986 63.8804 28.892 64 41.4464 64H64.2346L64.6511 61.2486C65.9601 51.2598 63.4611 35.1701 59.2367 26.6168C54.0007 16.1495 46.3848 9.39065 38.5904 8.43364C35.7939 8.07477 35.6154 7.95514 34.8419 5.56262C34.0089 3.05047 31.153 -1.90735e-06 29.606 -1.90735e-06C29.13 -1.90735e-06 27.94 1.07664 26.9285 2.33271Z" fill="black"/>
                    <path d="M19.5265 18.9093C16.1324 17.7784 14.1906 21.3333 15.1608 24.2427L15.6459 25.6969L16.1309 26.667C17.1011 27.6363 18.6751 26.8509 20.4964 24.7273C23.407 21.3336 23.8919 20.3637 19.5265 18.9093Z" fill="black"/>
                    <path d="M8.36979 39.2729C6.57438 37.9273 3.88885 40.6478 4.4897 42.6669L4.97468 43.6366L5.4597 44.1216L6.42985 44.6065H7.4C8.85522 44.6065 8.64326 44.3586 9.33993 42.6386C10.3105 40.2425 10.3104 40.7273 8.36979 39.2729Z" fill="black"/>
                    <path d="M12.2505 48.9698C12.2505 48.4849 13.7057 46.5456 14.6759 43.1516" stroke="black" stroke-width="2.5"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 11, y * 88 + 11))
                elif board[y][x] == 'С_ч':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="61" height="65" viewBox="0 0 61 65" fill="none">
                    <path d="M26.4902 0.9832C24.0068 2.53563 23.3859 6.10622 25.0416 9.26283L25.8176 10.7635L23.4377 11.902C22.1442 12.5229 19.402 14.6963 17.2807 16.7662C14.0729 19.9228 13.4003 20.8543 12.6243 23.4417C11.3308 27.892 12.3138 31.7731 16.1425 37.1548C17.6947 39.3282 17.7464 39.4317 17.0738 41.8121C15.4699 47.4526 15.9355 48.9015 19.7125 49.4708C20.799 49.6777 21.6785 49.9882 21.6785 50.1435C21.6785 50.9714 16.6081 51.7477 11.5377 51.7477C5.22561 51.7477 3.93215 52.2134 1.6039 55.4217L0 57.5951L2.01781 60.5965C3.15606 62.2524 4.60475 63.9601 5.17388 64.3741C6.15691 65.0468 6.41561 65.0468 7.50212 64.3223C8.22646 63.8566 11.7447 63.1321 15.6251 62.6147C23.955 61.4762 26.1281 60.907 28.6115 59.2511L30.5776 57.9056L32.2332 58.9923C35.1824 60.8035 38.2867 61.6315 45.6336 62.6147C50.5488 63.2356 53.084 63.8049 53.7566 64.4258C54.4809 65.0986 54.9466 65.1503 55.7744 64.7363C56.7574 64.1671 61 58.4749 61 57.6469C61 56.8707 58.2061 53.6623 56.6539 52.7309C55.3605 51.9546 54.067 51.7477 49.7727 51.7477C44.5471 51.7477 39.2697 50.9197 39.2697 50.0917C39.2697 49.8847 39.8388 49.6777 40.5632 49.6777C42.374 49.6777 44.8058 48.3323 45.1679 47.1939C45.3232 46.7281 45.0127 44.71 44.4436 42.7436L43.4606 39.2247L45.4784 36.2751C50.497 28.8752 50.1866 22.976 44.3919 17.1285C42.2188 14.9551 37.9245 11.902 36.0619 11.2292C35.2858 10.9705 35.3376 10.7635 36.2689 8.84885C37.6141 6.15797 37.2002 3.51884 35.1306 1.44893C33.8889 0.206989 33.268 0 30.888 0C29.0772 0 27.5768 0.362228 26.4902 0.9832Z" fill="black"/>
                    <path d="M32.1391 7.63105C32.8634 6.23386 32.8117 5.71639 31.8287 4.78493C30.2765 3.2325 28 4.11221 28 6.28561C28 8.56251 31.1043 9.54571 32.1391 7.63105Z" fill="black"/>
                    <path d="M38.2312 45.5403C39.2242 45.2304 39.2715 44.4728 38.2784 44.1973C37.049 43.8529 23.714 43.9906 22.8628 44.3695C20.1674 45.4715 23.9977 46.1946 31.4218 45.9536C34.6846 45.8503 37.7583 45.6781 38.2312 45.5403Z" fill="black"/>
                    <path d="M39.9919 42.2317C40.4058 41.973 40.561 41.4038 40.4058 40.938C39.9401 39.6961 22.6076 39.6961 22.0902 40.8863C21.935 41.352 21.9868 41.8695 22.1937 42.0765C22.7111 42.6457 39.164 42.801 39.9919 42.2317Z" fill="black"/>
                    <path d="M34.7732 24.8316C32.6083 24.8316 32.6083 24.7705 32.7939 22.509C32.9795 20.3697 32.9176 20.2474 31.0001 20.0641C29.0208 19.8807 28.9589 19.9418 28.9589 22.3256C28.9589 24.6483 28.8352 24.8316 27.227 24.8316C24.9384 24.8316 24.8146 25.0761 25.1239 27.2765C25.3713 28.8046 25.6806 29.1102 27.1651 29.1102C28.8352 29.1102 28.9589 29.2936 28.9589 31.5551C28.9589 33.8778 29.0208 34 31.0001 34C32.8557 34 32.9795 33.8778 32.9795 31.7385C32.9795 29.5992 33.1032 29.4158 35.0207 29.2324C36.8144 29.0491 37 28.8657 37 26.9098C37 24.9539 36.8763 24.8316 34.7732 24.8316Z" fill="black"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 13, y * 88 + 11))
                elif board[y][x] == 'Ко_ч':
                    svg_text = """
                    <svg width="60" height="65" viewBox="0 0 60 65" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M27.7895 1.78396C27.2434 3.52308 26.9704 3.74047 25.2775 3.74047C23.53 3.74047 23.4207 3.84917 23.4207 5.58829C23.4207 7.21871 23.6938 7.65349 25.6051 8.6861C26.8065 9.39261 27.7895 10.3165 27.7895 10.7513C27.7895 11.1861 26.6427 12.7622 25.2229 14.1752C22.9292 16.4578 22.6562 17.0556 22.4378 19.773C22.3285 21.4034 22.1101 22.7621 21.9463 22.7621C21.837 22.7621 21.0179 22.273 20.1988 21.6208C16.6491 19.0121 10.2051 18.6317 5.94558 20.8599C3.76118 22.0012 1.19452 25.1534 0.539198 27.4903C-0.716829 31.9468 0.0477087 34.5555 4.68955 41.6207C8.12997 46.7837 9.05834 49.2837 9.54983 54.9902C10.0959 60.9684 11.2427 62.3271 17.086 63.8488C23.803 65.6423 39.476 65.2619 45.3193 63.251C49.2512 61.838 50.0157 60.751 50.4526 55.9685C51.0533 49.8815 52.3094 46.4033 56.0774 40.7511C59.6817 35.3707 60.2824 33.4686 59.9001 29.2295C59.081 21.023 49.5789 16.8382 41.442 21.023L38.2746 22.6534L37.8924 19.6643C37.5647 17.0556 37.237 16.4034 35.1073 14.3926C32.1583 11.5665 32.0491 10.2078 34.6158 8.63175C36.1994 7.65349 36.5271 7.11002 36.5271 5.58829C36.5271 3.84917 36.4179 3.74047 34.6704 3.74047C33.0867 3.74047 32.8136 3.52308 32.3768 1.947C31.9399 0.533967 31.5576 0.153529 30.1378 0.0448335C28.6087 -0.118209 28.3902 0.0991817 27.7895 1.78396Z" fill="black"/>
                    <path d="M9.93232 25.5337C7.74793 26.1859 5.9458 28.4141 5.9458 30.5337C5.9458 33.0337 8.02098 36.838 11.1337 39.9358C13.5912 42.3815 14.1919 42.7075 16.8678 43.0336C20.199 43.4141 23.8578 42.7619 24.6224 41.6749C25.7692 39.9902 23.9671 33.4141 21.5096 30.1533C18.5061 26.3489 13.8096 24.4468 9.93232 25.5337Z" fill="black"/>
                    <path d="M45.4286 25.4796C40.4591 26.6209 36.418 31.6209 35.3804 37.8708C34.6705 42.273 35.5442 42.9795 41.169 42.9795C45.2102 42.9795 45.374 42.9251 47.886 40.8599C51.2719 38.0339 54.0023 33.523 54.0023 30.7513C54.0023 29.1752 53.6201 28.2513 52.4187 27.0557C51.5449 26.1861 50.3435 25.4796 49.7428 25.4796C49.1421 25.4796 48.3229 25.3709 47.886 25.2622C47.5038 25.1535 46.357 25.2622 45.4286 25.4796Z" fill="black"/>
                    <path d="M44.5545 55.751C44.4453 55.3706 43.5169 54.8271 42.4793 54.501C39.9127 53.6858 30.2467 53.3054 23.6935 53.7945C18.1779 54.1749 15.229 54.8815 15.229 55.8597C15.229 57.1641 17.3588 57.4358 23.5843 56.8923C27.9531 56.5119 31.9942 56.5119 36.363 56.8923C42.807 57.4358 45.046 57.1641 44.5545 55.751Z" fill="black"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 14, y * 88 + 11))
                elif board[y][x] == 'Ф_ч':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="68" height="60" viewBox="0 0 68 60" fill="none">
                    <path d="M31.4644 1.09913C29.9277 2.65309 29.9277 4.47235 31.5412 6.0263L32.7322 7.20124L30.965 17.9273C30.0045 23.8399 29.1977 28.805 29.1977 28.9566C29.1977 29.1082 28.9288 29.184 28.5831 29.1082C28.1605 29.0324 26.5469 25.8866 23.9729 20.1256C21.7831 15.2363 19.9774 11.0293 19.9774 10.764C19.9774 10.5366 20.2463 10.1196 20.5537 9.85433C21.4373 9.13421 21.2836 7.01174 20.2847 5.9126C19.7853 5.34408 18.8633 4.81346 18.1718 4.69976C17.1345 4.51025 16.7503 4.66186 15.7514 5.60939C13.9458 7.42865 14.4068 10.1196 16.7503 10.9914C17.4034 11.2567 17.6723 11.6357 17.7107 12.3937C17.7107 13.0001 18.0949 17.4346 18.5559 22.286C19.209 28.8429 19.3243 31.2307 18.9785 31.496C18.6712 31.7234 16.5966 29.5251 12.1785 24.2568C6.10847 16.9798 5.83955 16.6387 6.22373 15.6153C6.8 14.1751 6.33898 12.659 5.14802 11.8631C2.84294 10.3849 0 11.7873 0 14.3646C0.0384181 16.108 0.729944 17.0177 2.53559 17.6241C3.95706 18.0789 3.99548 18.1547 6.60791 24.8632C8.0678 28.6155 10.3729 34.4523 11.7175 37.9013C14.5605 45.0646 15.2904 48.8169 14.6757 53.2134C14.2915 56.2455 14.2915 56.2455 18.9017 57.7616C24.2034 59.5429 27.1232 59.9977 33.0395 59.9977C39.0328 60.0356 41.6068 59.6187 49.9435 57.193L54.0158 56.0181L53.8621 49.916L53.7085 43.776L58.2802 32.4056C60.8158 26.1519 63.1593 20.3909 63.4667 19.5571C63.9277 18.42 64.3503 18.0031 65.4644 17.6241C67.2701 17.0177 67.9616 16.108 68 14.3646C68 11.7873 65.1571 10.3849 62.852 11.8631C61.661 12.659 61.2 14.1751 61.7763 15.6153C62.1605 16.6008 61.8915 16.9798 56.2057 23.7641C49.1367 32.254 49.4825 31.875 48.9062 31.5339C48.5605 31.3065 48.6757 28.9187 49.4057 21.6037C49.9051 16.2976 50.4045 11.7115 50.5198 11.4462C50.5966 11.2188 50.9424 10.9914 51.2497 10.9914C52.0565 10.9914 53.4011 9.17211 53.4011 8.07297C53.4011 6.74643 52.7864 5.76099 51.4418 5.11667C48.4836 3.60062 45.5638 7.16334 47.4463 10.0059C48.0226 10.8777 47.8689 11.3325 44.0271 19.9361C41.6836 25.2423 39.8011 29.0324 39.4554 29.1082C38.8407 29.2219 38.9944 30.0178 36.6508 15.7669C35.2294 7.08754 35.2294 7.08754 35.9977 6.48112C37.9571 4.96507 38.1492 2.72889 36.5356 1.09913C35.6904 0.303207 35.0373 -2.83933e-06 34 -2.83933e-06C32.9627 -2.83933e-06 32.3096 0.303207 31.4644 1.09913Z" fill="black"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 10, y * 88 + 14))
                elif board[y][x] == 'П_ч':
                    svg_text = """
                    <svg xmlns="http://www.w3.org/2000/svg" width="44" height="61" viewBox="0 0 44 61" fill="none">
                    <path d="M17.4097 1.15096C13.6031 3.14783 12.3155 6.91335 13.827 11.3065C14.3308 12.6757 14.6667 13.8739 14.6107 13.9309C14.4987 13.988 13.4911 14.5585 12.3715 15.3002C8.62087 17.5823 6.94148 23.63 8.7888 28.0802C9.18066 29.1071 10.3562 30.6476 11.3639 31.5604C12.8193 32.8156 13.0433 33.215 12.4275 33.6144C9.6285 35.2119 5.59796 38.8633 4.14249 41.0313C1.51145 45.025 0.615776 48.163 0.335878 54.8382L0 61H22H44L43.6641 54.8382C43.4402 50.6733 42.9924 47.7066 42.1527 45.4815C40.7532 41.6589 36.9466 37.0946 33.4198 34.9836C32.0763 34.1849 30.9567 33.3861 30.9567 33.215C30.9567 33.0438 31.6285 32.4162 32.4122 31.7316C34.1476 30.3623 35.9389 26.5968 35.9949 24.2576C35.9949 21.2338 34.7074 18.2099 32.6361 16.2701C31.4606 15.2432 30.229 14.2732 29.8371 14.1021C29.2214 13.9309 29.2214 13.4745 29.7252 11.9341C30.117 10.9071 30.3969 8.96728 30.3969 7.59799C30.3969 1.66444 23.1756 -1.98698 17.4097 1.15096Z" fill="black"/>
                    </svg>
                    """.strip()
                    svg_bytes = bytes(svg_text, encoding='utf-8')
                    bytestream = BytesIO(svg_bytes)
                    surface = pygame.image.load(bytestream)
                    screen.blit(surface, (x * 88 + 22, y * 88 + 14))
        all_sprites.draw(screen)
        # all_sprites.update(event)
        clock.tick(FPS)
        pygame.display.flip()
